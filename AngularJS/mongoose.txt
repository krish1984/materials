http://mongoosejs.com/docs/connections.html
https://blog.jayway.com/2015/04/13/600k-concurrent-websocket-connections-on-aws-using-node-js/

Can node.js handle thousands of concurrent requests per second, when writing them to Mongo?
A: As long you follow node.js' async model and do some optimizations, you can handle a lot of concurrent requests. The database usually is the bottleneck of your app, but since MongoDB does not use heavy transactions as RDBMSs do, it is able to sustain a lot of throughput. Generally the web server and the database server are 2 different machines, because of Async nature, the event loop gets free after forwarding the read/write request to database server. That is why, a Node JS HTTP server can handle a large number of requests while the process of complex read/write operations could be inprocess on database server(s).


What is _version field in mongo created by mongoose?
------------------------------------------------------
The versionKey is a property set on each document when first created by Mongoose by default. 
http://gitmeet.com/post/mongoose-document-versioning-a-simple-fail-safe-way-to-update-nested-documents

The version key is also retrived for each record when queried, which is ugly. 
This keys value contains the internal revision of the document. The name of this document property is configurable. The default is __v.

If this conflicts with your application you can configure as such: new Schema({..}, { versionKey: '_somethingElse' })

If you don't need version_key, you can just:

var UserSchema = mongoose.Schema({
    nickname: String,
    reg_time: {type: Date, default: Date.now}
}, {
    versionKey: false // You should be aware of the outcome after set to false
});

To hide it from all queries, which sometimes can be not what you want too, use the select schema type option:
var Schema = new Schema({ __v: { type: Number, select: false}}) 
});

or  you can call user.toObject({ versionKey: false }), which will hide __v version property or when you query, like model.findById(id).select('-__v')
'-' means exclude the field.

Query examples:
------------------------------
// find all athletes person that play tennis
var query = Athlete.find({ 'sport': 'Tennis' });

// selecting the 'name' and 'age' fields
query.select('name age');

// limit our results to 5 items
query.limit(5);

// sort by age
query.sort({ age: -1 });

// execute the query at a later time
query.exec(function (err, athletes) {
  if (err) return handleError(err);
  // athletes contains an ordered list of 5 athletes who play Tennis
})

https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose

Athlete.
  find().
  where('sport').equals('Tennis').
  where('age').gt(17).lt(50).  //Additional where query
  limit(5).
  sort({ age: -1 }).
  select('name age').
  exec(callback); // where callback is the name of our callback function.
