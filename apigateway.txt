Need of API gateway:
------------------------

We want to expose our indivual services to the public N/W, thera are no of concerns in it: If you dont want to expose ur services to an outside network, i dont think u need an API gateway. It just only adds more complexity, than solving ur problem.

1. We shud not directly expose the API to public, we need some wall in between which authenticates the external clients.
2. When a client is dependent on multiple services, it wud need to make multiple trips.
3. There can be multiple dissimilar clients calling the same API, but each having diffrent needs some want to assemble multiple calls, some dont want.

So we need somthing in between, that takes care of all of these issues. So API gateway(zuul),

1. provides a single point of contact to our system, takes care of authentication of requests to services.
2. cater neepds of different types of clients(phones,tablets,laptops,tvs), by assembling multiple requests into one call based on clients needs.
3. accept requests and route them to the real services(aka reverse proxy).
4. Cache data to reduce load on services when needed.
5. protocol translation.

Zuul: simply put it is a router. Add starter-zuul(includes eureka client i.e ribbon client as well!) and @EnablezullProxy. client ids become uris. outside world talk to zuul using client ids and zuul talks to real services with the address its ribbon returns to it.

So to use zuul, prerequisite is u must be using eureka. Bydefault all services discovered n eureka are exposed by zuul to outside world. U can hide a service from being exposed to outside.

Ex zuul confi:
  zuul.profix=/api
  zuul.ignoredService=some-service
  routes.subject.path=
  routes.noun.path=
