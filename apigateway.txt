Need of API gateway:(aka edge service)
------------------------

We want to expose our indivual services to the public N/W, thera are no of concerns in it: If you dont want to expose ur services to an outside network, i dont think u need an API gateway. It just only adds more complexity, than solving ur problem.

1. We shud not directly expose the API to public, we need some wall in between which authenticates the external clients.
2. When a client is dependent on multiple services, it wud need to make multiple trips.
3. There can be multiple dissimilar clients calling the same API, but each having diffrent needs some want to assemble multiple calls, some dont want.

So we need somthing in between, that takes care of all of these issues. So API gateway(zuul),

1. provides a single point of contact to our system, takes care of authentication/logging of requests to services.
2. cater neepds of different types of clients(phones,tablets,laptops,tvs), by assembling multiple requests into one call based on clients needs.
3. accept requests and route them to the real services(aka reverse proxy).
4. Cache data to reduce load on services when needed.
5. protocol translation.

Zuul: Zuul is a JVM based router and server side load balancer by Netflix.  Add starter-zuul(includes eureka client i.e ribbon client as well!) and @EnablezullProxy. client ids become uris. outside world talk to zuul using client ids and zuul talks to real services with the address its ribbon returns to it.
 At the starting of boot app, zuul will discover all the other services from eureka and map them to their actual urlslike this:
 s1 -- > http://localhost:8080/service1/
 s2 -- > http://localhost:8080/service2/

U can override this by telling it to not to look for eureka and specify actual urls, as follows:
ribbon.eureka.enabled=false
zuul.routes.books.url=http://localhost:8090 //u must specify this since u turned off eureka client.



So to use zuul, prerequisite is u must be using eureka. Bydefault all services discovered n eureka are exposed by zuul to outside world. U can hide a service from being exposed to outside.

Ex zuul confi:
  zuul.profix=/api
  zuul.ignoredService=some-service
  routes.subject.path=
  routes.noun.path=
  zuul.routes.books.url=http://localhost:8090
  ribbon.eureka.enabled=false
  
Now letâ€™s see how we can filter requests through our proxy service. Zuul has four standard filter types:

pre filters are executed before the request is routed,
routing filters can handle the actual routing of the request,
post filters are executed after the request has been routed, and
error filters execute if an error occurs in the course of handling the request.

Ex:
----
public class SimpleFilter extends ZuulFilter {
  @Override
  public String filterType() {
    return "pre";
  }
  @Override
  public int filterOrder() {
    return 1;
  }
  @Override
  public boolean shouldFilter() {
    return true;
  }
  @Override
  public Object run() {
    RequestContext ctx = RequestContext.getCurrentContext();
    HttpServletRequest request = ctx.getRequest();
    return null;
  }
}
App:
----------------------
@EnableZuulProxy
@SpringBootApplication
public class GatewayApplication {
  public static void main(String[] args) {
    SpringApplication.run(GatewayApplication.class, args);
  }
  @Bean
  public SimpleFilter simpleFilter() {
    return new SimpleFilter();
  }
}

https://exampledriven.wordpress.com/2016/07/06/spring-cloud-zuul-example/
http://kubecloud.io/apigatewaypattern/
https://jmnarloch.wordpress.com/2015/12/09/spring-cloud-zuul-cassandra-route-storage/
